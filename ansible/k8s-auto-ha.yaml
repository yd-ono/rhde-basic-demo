---
- name: 複数のエッジデバイスのグループの中で1台のエッジデバイスへPodを起動する
  hosts:
    - all
  vars: # デフォルト変数
    namespace: dgw # namespace
    appname: dgw #アプリケーション名(マニフェストのディレクトリ名と同じにすること)
    servicename: dgw #Serviceリソースの名前(マニフェストに記載のもの)
    state: absent # present -> 起動、absent -> 削除
  ignore_unreachable: yes
  module_defaults:
    kubernetes.core.k8s:
      kubeconfig: "/tmp/kubeconfig-{{ ansible_host }}"
      validate_certs: false
    kubernetes.core.k8s_info:
      kubeconfig: "/tmp/kubeconfig-{{ ansible_host }}"
      validate_certs: false
  pre_tasks:
    - name: slurp up kubeconfig
      ansible.builtin.slurp:
        path: /var/lib/microshift/resources/kubeadmin/kubeconfig
      register: kubeconfig_raw
      become: true
    - name: create kubeconfig
      block:
      - name: kubeconfig内のkube-apiのエンドポイントを localhost から {{ ansible_host }} へ修正
        delegate_to: localhost
        when: kubeconfig_raw['content'] is defined
        ansible.builtin.copy:
          content: "{{ (kubeconfig_raw['content'] | b64decode).replace('localhost', ansible_host) }}"
          dest: "/tmp/kubeconfig-{{ ansible_host }}"
      rescue:
        - debug:
            msg: OS停止中のホストは処理をスキップする。
    - name: allow API access
      ansible.posix.firewalld:
        port: 6443/tcp
        zone: public
        state: enabled
        immediate: true
        permanent: true
      become: true

  tasks:
    - name: localhostから実行
      delegate_to: localhost
      block:

        - name: kubeconfigの存在確認
          stat:
            path: /tmp/kubeconfig-{{ ansible_host }}
          register: kubeonfig_check

        - name: イベントリからホストリストを作成
          set_fact:
            inventory_list: "{{ hostvars | dict2items | map(attribute='value') | map(attribute='ansible_host') | zip(ansible_play_hosts_all) | list }}"

        - name: リストを辞書へ変換
          set_fact:
            inventory_dict: "{{ dict(inventory_list) }}"

        - debug: var=inventory_dict

        - name: "{{ appname}} Podの起動状態を確認"
          when: kubeonfig_check.stat.exists
          kubernetes.core.k8s_info:
            kind: Pod
            namespace: "{{ namespace }}"
            label_selectors:
            - app = "{{ appname }}"
          register: container_status

        - debug: var=container_status

        - name: "{{ appname}} Podが起動するhostIPとPod statusのkey/valueペアを作成"
          set_fact:
            container_status: >-
              {%- set tmpdict = {} -%}
              {%- for i in range(item|length) -%}
              {%-   set _ = tmpdict.update({item.status.hostIP: item.status.phase}) -%}
              {%- endfor -%}
              {{ tmpdict }}
          with_items: "{{ container_status | json_query('resources[*]') }}"

        - debug: var=container_status

        - name: 辞書を更新
          set_fact:
            inventory_dict: "{{ inventory_dict | combine(container_status, recursive=true)}}"

        - debug: var=inventory_dict

        - name: 不要なkeyが存在する項目を除外
          set_fact:
            inventory_dict: "{{ inventory_dict | dict2items | rejectattr('key', 'in', ['api_found', 'changed', 'failed', 'resources']) | map(attribute='value') | zip(inventory_dict | dict2items | map(attribute='key')) | list }}"

        - name: リスト再度辞書化
          set_fact:
            inventory_dict: "{{ dict(inventory_dict) }}"

        - debug: var=inventory_dict

        - name: 辞書のkeyとvalueを入れ替える
          set_fact:
            inverted_inventory_dict: "{{ inventory_dict | dict2items | map(attribute='value') | zip(inventory_dict | dict2items | map(attribute='key')) | list }}"

        - debug: var=inverted_inventory_dict

        - name: イベントリ情報の辞書化
          set_fact:
            inverted_inventory_dict: "{{ dict(inverted_inventory_dict) }}"

        - debug: var=inverted_inventory_dict

        - name: "{{ appname}} Pod が1台も起動していない場合、ホストリストの先頭ホストを選択"
          set_fact:
            host_to_start_container: "{{ inventory_list[0] }}"
          when: inverted_inventory_dict.Running is not defined
        - debug: var=ansible_host

        - name: Namespace作成
          when: ansible_host == "{{ host_to_start_container[0]}}"
          kubernetes.core.k8s:
            name: "{{ namespace }}"
            kind: Namespace
            state: present
            definition:
              metadata:
                labels:
                  pod-security.kubernetes.io/enforce: privileged
                  pod-security.kubernetes.io/audit: privileged
                  pod-security.kubernetes.io/warn: privileged

        - name: "{{ appname }} Pod のデプロイメント"
          when: ansible_host == "{{ host_to_start_container[0]}}"
          kubernetes.core.k8s:
            namespace: "{{ namespace }}"
            state: "{{ state }}"
            definition: "{{ lookup('kubernetes.core.kustomize', binary_path='/usr/local/bin/kubectl', dir='/runner/project/ansible/files/manifests/' + ( appname | string) ) }}"

        - name: "{{ appname }} Podのステータスを確認"
          when: ansible_host == "{{ host_to_start_container[0]}}"
          kubernetes.core.k8s_info:
            kind: Pod
            namespace: "{{namespace}}"
            label_selectors:
            - app = {{ appname }}
          register: pod_list

        - name: "{{ appname }} Pod情報の出力"
          when: ansible_host == "{{ host_to_start_container[0]}}"
          debug:
            msg: |
                "{{ pod_list | json_query('resources[*].metadata.name')}} is {{ pod_list | json_query('resources[*].status.phase')}}"

        - name: Serviceの状態を確認
          when: ansible_host == "{{ host_to_start_container[0]}}"
          kubernetes.core.k8s_info:
            kind: Service
            name: "{{ servicename }}"
            namespace: "{{ namespace }}"
          register: service_list
        - name: output Service info
          debug:
            msg: "Check Access: {{ service_list }}"

        - name: Routeの状態を確認
          when: ansible_host == "{{ host_to_start_container[0]}}"
          kubernetes.core.k8s_info:
            kind: Route
            name: "{{ appname }}"
            namespace: "{{ namespace }}"
          register: route_list
        - name: output Route info
          debug:
            msg: "Check Access: {{ route_list | json_query('resources[*].status.ingress[*].host')}}"
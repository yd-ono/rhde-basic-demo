---

- name: edge-gitops tasks
  block:

    - name: Create EC2 instance for edge gitops node
      amazon.aws.ec2_instance:
        state: running
        network:
          assign_public_ip: "{{ not aws_fix_ip | default(true) }}"
        key_name: "{{ ec2_name_prefix }}-key"
        security_group: "{{ ec2_security_group }}"
        instance_type: "{{ ec2_info['edge-gitops'].size }}"
        image_id: "{{ edge_gitops_node_ami.image_id }}"
        region: "{{ ec2_region }}"
        exact_count: 1
        filters:
          instance-state-name: running
          "tag:Workshop_edge_gitops_node": "{{ ec2_name_prefix }}-edge-manager-aws"
        tags:
          Workshop_edge_gitops_node: "{{ ec2_name_prefix }}-edge-manager-aws"
          Name: "{{ ec2_name_prefix }}-edge-manager-aws"
          Workshop: "{{ ec2_name_prefix }}"
          uuid: "{{ ec2_name_prefix }}"
          guid: "{{ ec2_name_prefix }}"
          Workshop_type: "{{ workshop_type }}"
          AWS_USERNAME: "{{ aws_user }}"
          owner: "{{ aws_user }}"
          Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
          Linklight: "This was provisioned through the linklight provisioner"
          short_name: "edge-gitops"
          username: "{{ ec2_info['edge-gitops'].username }}"
          ansible-workshops: "true"
          Students: "{{ student_total }}"
        wait: "{{ ec2_wait }}"
        vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_type: "{{ ec2_info['edge-gitops'].disk_volume_type }}"
              volume_size: "{{ ec2_info['edge-gitops'].disk_space }}"
              iops: "{{ ec2_info['edge-gitops'].disk_iops }}"
              throughput: "{{ ec2_info['edge-gitops'].disk_throughput }}"
              delete_on_termination: true
      register: edge_gitops_node_create

    - name: grab instance ids to tag gitops node
      amazon.aws.ec2_instance_info:
        region: "{{ ec2_region }}"
        filters:
          instance-state-name: running
          "tag:Workshop_edge_gitops_node": "{{ ec2_name_prefix }}-edge-manager-aws"
      register: node1_output


    - name: Ensure tags are present for edge gitops node
      amazon.aws.ec2_tag:
        region: "{{ ec2_region }}"
        resource: "{{ item.1.instance_id }}"
        state: present
        tags:
          Name: "{{ ec2_name_prefix }}-edge-manager-aws"
          Index: "{{ item[0] }}"
          launch_time: "{{ item.1.launch_time }}"
      with_indexed_items:
        - "{{ node1_output.instances }}"
      when: node1_output.instances|length > 0


    - name: Check if Elastic IP is associated
      set_fact:
        elastic_ip_associated: "{{ node1_output.instances[0].public_ip_address is defined }}"
      when: aws_fix_ip is defined and aws_fix_ip|bool


    - block: 
      - name: Get information about all Elastic IPs
        amazon.aws.ec2_eip_info:
          region: "{{ ec2_region }}"
        register: elastic_ips

      - name: Filter unallocated Elastic IPs
        set_fact:
          unallocated_eips: "{{ elastic_ips.addresses | selectattr('instance_id', 'undefined') | map(attribute='public_ip') | list }}"

      - name: Allocate a new Elastic IP if none are available for reuse
        ec2_eip:
          region: "{{ ec2_region }}"
          in_vpc: yes
        when: unallocated_eips | length == 0
        register: eip

      - name: Set eip variable to an unallocated or newly allocated Elastic IP
        set_fact:
          eip: "{{ unallocated_eips | first | default(eip.public_ip) }}"

      - name: Associate Elastic IP with EC2 instance
        amazon.aws.ec2_eip:
          device_id: "{{ node1_output.instances[0].instance_id }}"
          region: "{{ ec2_region }}"
          public_ip: "{{ eip }}"

      when: (aws_fix_ip is defined and aws_fix_ip|bool) and ( not elastic_ip_associated | bool ) 


    - name: Associate IAM instance profile with edge gitops node
      amazon.aws.ec2_instance:
        instance_ids: "{{ item.1.instance_id }}"
        region: "{{ ec2_region }}"
        instance_role: "VPCLockDown_{{ ec2_name_prefix }}_student{{ item.0 + 1 }}"
        state: running
        wait: true
      with_indexed_items:
        - "{{ node1_output.instances }}"
      register: associate_iam_instance_profile
      until: associate_iam_instance_profile is not failed
      retries: 12
      delay: 10
      when:
        - node1_output.instances | length > 0
        - tower_node_aws_api_access | default(false) | bool

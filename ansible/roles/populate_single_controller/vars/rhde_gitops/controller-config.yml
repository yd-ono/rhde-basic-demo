---

_internal_controller_hostname: "controller.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}"
controller_hostname: "{{ ansible_host }}:10443"
controller_validate_certs: false
controller_configuration_credentials_secure_logging: false

# These are configured for global use
controller_execution_environments:
  - name: Device Edge Workshops Execution Environment
    image: quay.io/device-edge-workshops/provisioner-execution-environment:latest
    pull: missing

controller_credential_types:
  - name: Contrller API Credentials
    kind: cloud
    inputs:
      fields:
        - id: controller_username
          type: string
          label: Controller API Username
        - id: controller_password
          type: string
          label: Controller API Password
          secret: true
    injectors:
      extra_vars:
        controller_hostname: "controller.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}"
        controller_username: "{  { controller_username }}"
        controller_password: "{  { controller_password }}"
        controller_validate_certs: 'false'

# These can be templated out for all students
controller_organizations_yaml: |-
  {% for student_number in range(1, student_total + 1) %}
  - name: "Student{{ student_number }} Organization"
  {% endfor %}

controller_users_yaml: |-
  {% for student_number in range(1, student_total + 1) %}
  - username: "student{{ student_number }}"
    password: "{{ admin_password }}"
    email: "student{{ student_number }}@dont-email.me"
    organization: "Student{{ student_number }} Organization"
  {% endfor %}

controller_roles_yaml: |-
  {% for student_number in range(1, student_total + 1) %}
  - user: "student{{ student_number }}"
    organization: "Student{{ student_number }} Organization"
    role: admin
  {% endfor %}

controller_inventories_yaml: |-
  {% for student_number in range(1, student_total + 1) %}
  - name: Edge Devices
    organization: "Student{{ student_number }} Organization"
    variables:
      student_number: "{{ student_number }}"
  - name: Edge Utilities
    organization: "Student{{ student_number }} Organization"
    variables:
      student_number: "{{ student_number }}"
  - name: Local Actions
    organization: "Student{{ student_number }} Organization"
    variables:
      student_number: "{{ student_number }}"
  {% endfor %}

# These are student specific because we must query the API for credentials under the student user so we only see that student's credentials
# Loop over these by student number, which is slower but not bad
controller_hosts:
  - name: localhost
    inventory: Local Actions
    variables:
      ansible_connection: local
      ansible_python_interpreter: "{  { ansible_playbook_python }}"
    enabled: true
  - name: "image-builder.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}"
    inventory: Edge Utilities
    variables:
      ansible_host: "{{ ansible_host }}"
    enabled: true

controller_credentials:
  - name: Gitea Credentials
    organization: "Student{{ student_number }} Organization"
    credential_type: Source Control
    inputs:
      username: "student{{ student_number }}"
      password: "{{ admin_password }}"
  - name: Device Credentials
    organization: "Student{{ student_number }} Organization"
    credential_type: Machine
    inputs:
      username: ansible
      password: "{{ admin_password }}"
      become_password: "{{ admin_password }}"
  - name: Controller API Credentials
    organization: "Student{{ student_number }} Organization"
    credential_type: Contrller API Credentials
    inputs:
      controller_username: "student{{ student_number }}"
      controller_password: "{{ admin_password }}"
  - name: Image Builder Credentials
    organization: "Student{{ student_number }} Organization"
    credential_type: Machine
    inputs:
      username: "{{ ansible_user }}"
      password: "{{ admin_password }}"
      become_password: "{{ admin_password }}"


controller_projects:
  - name: Device Edge Codebase
    organization: "Student{{ student_number }} Organization"
    scm_type: git
    scm_branch: main
    scm_url: https://gitea.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}/student{{ student_number }}/{{ repo_name }}.git
    credential: Gitea Credentials

controller_templates:
  - name: Test Device Connectivity
    organization: "Student{{ student_number }} Organization"
    inventory: Edge Devices
    project: Device Edge Codebase
    playbook: playbooks/hello-world.yml
    credentials:
      - Device Credentials
    execution_environment: Device Edge Workshops Execution Environment
  - name: Initial Device Configuration
    organization: "Student{{ student_number }} Organization"
    inventory: Edge Devices
    project: Device Edge Codebase
    playbook: playbooks/initial-configuration.yml
    credentials:
      - Device Credentials
    execution_environment: Device Edge Workshops Execution Environment
  - name: Create Host in Controller Inventory
    organization: "Student{{ student_number }} Organization"
    inventory: Local Actions
    project: Device Edge Codebase
    playbook: playbooks/manage-hosts-in-controller.yml
    credentials:
      - Controller API Credentials
    ask_variables_on_launch: true
    execution_environment: Device Edge Workshops Execution Environment
    become_enabled: true

  - name: Compose Image
    organization: "Student{{ student_number }} Organization"
    inventory: Edge Utilities
    project: Device Edge Codebase
    playbook: playbooks/compose-image.yml
    credentials:
      - Image Builder Credentials
    execution_environment: Device Edge Workshops Execution Environment
    become_enabled: true


  - name: Create ISO Kickstart
    organization: "Student{{ student_number }} Organization"
    inventory: Edge Utilities
    project: Device Edge Codebase
    playbook: playbooks/create_iso_kickstart.yml
    credentials:
      - Image Builder Credentials
    execution_environment: Device Edge Workshops Execution Environment
    become_enabled: true

  - name: Create Quadlet APP
    organization: "Student{{ student_number }} Organization"
    inventory: Edge Devices
    project: Device Edge Codebase
    playbook: playbooks/podman_quadlet.yml
    credentials:
      - Device Credentials
    execution_environment: Device Edge Workshops Execution Environment
    become_enabled: true
    ask_inventory_on_launch: true

  - name: Update Microshift APP
    organization: "Student{{ student_number }} Organization"
    inventory: Edge Devices
    project: Device Edge Codebase
    playbook: playbooks/update_app_microshift.yml
    credentials:
      - Device Credentials
    execution_environment: Device Edge Workshops Execution Environment
    become_enabled: true
    extra_vars: 
        namespace: namespace
        deployment: deployment
        container: container
        image: image
        tag: tag
    ask_variables_on_launch: true

  - name: Deploy Manifest in Microshift
    organization: "Student{{ student_number }} Organization"
    inventory: Edge Devices
    project: Device Edge Codebase
    playbook: playbooks/deploy_app_microshift.yml
    credentials:
      - Device Credentials
    execution_environment: Device Edge Workshops Execution Environment
    become_enabled: true
    ask_variables_on_launch: true
    extra_vars: 
        manifest: https://gitea.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}/student{{ student_number }}/device-edge-configs/raw/branch/main/APPs/microshift/2048/app_2048-microshift.yml

  - name: Publish Image
    organization: "Student{{ student_number }} Organization"
    inventory: Edge Utilities
    project: Device Edge Codebase
    playbook: playbooks/publish-image.yml
    credentials:
      - Image Builder Credentials
    execution_environment: Device Edge Workshops Execution Environment
    become_enabled: true
    notification_templates_success: "Slack Notification"



  - name: Copy config files
    organization: "Student{{ student_number }} Organization"
    inventory: Edge Devices
    ask_inventory_on_launch: true
    project: Device Edge Codebase
    playbook: playbooks/copy-os-files.yml
    credentials:
      - Device Credentials
    execution_environment: Device Edge Workshops Execution Environment
    become_enabled: true


  - name: Reboot devices
    organization: "Student{{ student_number }} Organization"
    ask_inventory_on_launch: true
    inventory: Edge Devices
    project: Device Edge Codebase
    playbook: playbooks/reboot-devices.yml
    credentials:
      - Device Credentials
    execution_environment: Device Edge Workshops Execution Environment
    become_enabled: true



  - name: Run command
    organization: "Student{{ student_number }} Organization"
    inventory: Edge Devices
    project: Device Edge Codebase
    playbook: playbooks/run-command.yml
    credentials:
      - Device Credentials
    execution_environment: Device Edge Workshops Execution Environment
    become_enabled: true
    ask_variables_on_launch: true
    extra_vars: 
        command_to_execute: date

controller_workflows:
  - name: Provision Edge Device
    organization: "Student{{ student_number }} Organization"
    state: present
    allow_simultaneous: true
    survey_enabled: false
    ask_variables_on_launch: true
    simplified_workflow_nodes:
      - identifier: Create Host in Controller Inventory
        unified_job_template: Create Host in Controller Inventory
        success_nodes:
          - Test Device Connectivity
      - identifier: Test Device Connectivity
        unified_job_template: Test Device Connectivity
        success_nodes:
          - Initial Device Configuration
      - identifier: Initial Device Configuration
        unified_job_template: Initial Device Configuration
    notification_templates_success: "Slack Notification"



  - name: New Edge Device Image
    organization: "Student{{ student_number }} Organization"
    state: present
    allow_simultaneous: false
    survey_enabled: false
    simplified_workflow_nodes:
      - identifier: Compose Image
        unified_job_template: Compose Image
        success_nodes:
          - Publish Image Approval
      - identifier: Publish Image Approval
        approval_node:
          name: Approve the new Image
          description: Approve this to proceed in workflow
          timeout: 0
        success_nodes:
          - Publish Image
      - identifier: Publish Image
        unified_job_template: Publish Image
    webhook_service: github
    notification_templates_approvals: "Slack Notification"
    notification_templates_success: "Slack Notification"


  - name: Configure Edge Device
    organization: "Student{{ student_number }} Organization"
    state: present
    allow_simultaneous: false
    survey_enabled: false
    inventory: Edge Devices
    ask_inventory_on_launch: true
    simplified_workflow_nodes:
      - identifier: Copy config files
        unified_job_template: Copy config files
      #  success_nodes:
      #    - Reboot approval
      #- identifier: Reboot approval
      #  approval_node:
      #    name: Approve the reboot
      #    description: Reboot the device if it's needed
      #    timeout: 0
      #  success_nodes:
      #    - Reboot devices
      #- identifier: Reboot devices
      #  unified_job_template: Reboot devices
    webhook_service: github
    notification_templates_approvals: "Slack Notification"
    notification_templates_success: "Slack Notification"


  - name: OSTree Upgrade
    organization: "Student{{ student_number }} Organization"
    state: present
    allow_simultaneous: true
    survey_enabled: false
    inventory: Edge Devices
    simplified_workflow_nodes:
      - identifier: Run command
        unified_job_template: Run command
        extra_vars: 
            command_to_execute: rpm-ostree upgrade
        success_nodes:
          - Reboot approval
      - identifier: Reboot approval
        approval_node:
          name: Approve the reboot
          description: Reboot the device approval
          timeout: 0
        success_nodes:
          - Reboot devices
      - identifier: Reboot devices
        unified_job_template: Reboot devices
    notification_templates_success: "Slack Notification"


controller_notifications:
  - name: Slack Notification
    description: "Notification to Slack channel #general"
    organization: "Student{{ student_number }} Organization"
    notification_type: slack
    notification_configuration:
      token: "{{ slack_app_token }}" 
      channels:
      - "#general"
{% if wifi_network is defined and wifi_password is defined %}
%pre
nmcli dev wifi connect "{{ wifi_network }}" password "{{ wifi_password }}"
%end
{% endif %}
{% if wifi_network is not defined  %}
network --bootproto=dhcp --onboot=true
{% endif %}
lang en_US.UTF-8
keyboard us
timezone Etc/UTC
text
zerombr
clearpart --all --initlabel
part /boot/efi --fstype=efi --size=200
part /boot --fstype=xfs --asprimary --size=800
part swap --fstype=swap --recommended
part pv.01 --grow
volgroup rhel pv.01
logvol / --vgname=rhel --fstype=xfs --percent=90 --name=root
reboot
graphical
user --name=ansible --groups=wheel --password='{{ admin_password }}'
rootpw --plaintext --lock '{{ admin_password }}'
services --enabled=ostree-remount
ostreesetup --nogpg --url=http://ostree-repo.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}/student-repos/student{{ student_number }}/repo --osname=rhel --ref=rhel/9/x86_64/edge

%post --log=/root/kickstart-post.log
set -x

firewall-offline-cmd --zone=trusted --add-source=10.42.0.0/16
firewall-offline-cmd --zone=trusted --add-source=169.254.169.1
firewall-offline-cmd --zone=public --add-port=80/tcp
firewall-offline-cmd --zone=public --add-port=443/tcp
firewall-offline-cmd --zone=public --add-port=6443/tcp


cat > /etc/microshift/config.yaml <<EOF
dns:
  baseDomain: $(hostname -I | awk '{print $1}').nip.io
network:
  clusterNetwork:
    - cidr: 10.42.0.0/16
  serviceNetwork:
    - 10.43.0.0/16
  serviceNodePortRange: 30000-32767
node:
  hostnameOverride: "microshift"
  nodeIP: "$(hostname -I | awk '{print $1}')"
apiServer:
  subjectAltNames: 
    - microshift.lablocal
    - microshift.$(hostname -I | awk '{print $1}').nip.io
debugging:
  logLevel: "Normal"

EOF



cat > /etc/crio/openshift-pull-secret <<EOF
{{ pull_secret | default('INCLUDE-YOUR-PULL-SECRET') }}
EOF
sudo chown root:root /etc/crio/openshift-pull-secret
sudo chmod 600 /etc/crio/openshift-pull-secret



cat <<EOF > /etc/microshift/manifests/kustomization.yaml
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

resources:
  - testapp.yaml

patches:
  - patch: |-
      - op: replace
        path: "/spec/host"
        value: test.apps.$(hostname -I | awk '{print $1}').nip.io
    target:
      kind: Route
EOF


cat <<EOF > /etc/microshift/manifests/testapp.yaml
apiVersion: v1
kind: Namespace
metadata:
  labels:
    kubernetes.io/metadata.name: test
  name: test
spec: {}
---
apiVersion: apps/v1                                                                                                                                                                                     
kind: Deployment                                                                                                                                                                                        
metadata:                                                                                                                                                                                                                                                                                                                                                                              
  labels:                                                                                                                                                                                               
    app: hello                                                                                                                                                                                          
  name: test-hello                                                                                                                                                                                           
  namespace: test                                                                                                                                                                                                                                                                                                                                           
spec:                                                                                                                                                                                                   
  replicas: 1
  selector:
    matchLabels:
      app: hello
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: hello
    spec:
      containers:
      - image: quay.io/luisarizmendi/hello-js:latest
        imagePullPolicy: Always
        name: hello-js
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File      
        volumeMounts:
        - mountPath: /mnt
          name: my-volume
      volumes:
      - name: my-volume
        persistentVolumeClaim:
          claimName: test-lv-pvc        
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: test-lv-pvc
  namespace: test
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1G
---
apiVersion: v1
kind: Service
metadata:
  name: test-nodeport
  namespace: test
spec:
  type: NodePort
  selector:
    app: hello
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      nodePort: 30080
---
apiVersion: v1
kind: Service
metadata:
  name: test-service
  namespace: test
spec:
  selector:
    app: hello
  ports:
  - name: http
    protocol: TCP
    port: 8080
    targetPort: 8080

---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: test-route
  namespace: test
spec:
  host: APP-HOST
  port:
    targetPort: 8080 
  to:
    kind: Service
    name: test-service
    weight: 10
EOF


cat > /var/tmp/aap-auto-registration.sh <<EOF
#!/bin/bash
# Get the name of the interface with the default routeDeploy Microshift APP
default_iface=\$(/usr/sbin/ip route | /usr/bin/awk '/default/ {print \$5}')

# Get the IP address of the default interface
IP_ADDRESS=\$(/usr/sbin/ip addr show dev \$default_iface | /usr/bin/awk '/inet / {print \$2}' | cut -d '/' -f 1 | head -n 1)

# Get the MAC address of the default interface
MAC_ADDRESS=\$(cat /sys/class/net/\$default_iface/address | sed 's/://g')

STUDENT='{{ student_number }}'

JSON="{\
\"ip_address\": \"\$IP_ADDRESS\", \
\"student\": \"\$STUDENT\", \
\"mac_address\": \"\$MAC_ADDRESS\" \
}"

/usr/bin/curl -H 'Content-Type: application/json' --data "\$JSON" https://eda.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}/endpoint
EOF

chmod +x  /var/tmp/aap-auto-registration.sh

cat > /etc/systemd/system/aap-auto-registration.service <<EOF
[Unit]
Description=Register to Ansible Automation Platform
After=network-online.target
Wants=network-online.target
ConditionPathExists=!/var/tmp/aap-registered

[Service]
Type=simple
ExecStart=/bin/bash -c 'while true; do /var/tmp/aap-auto-registration.sh && /usr/bin/touch /var/tmp/aap-registered && break; done'

[Install]
WantedBy=default.target
EOF

systemctl daemon-reload
systemctl enable connect-wifi.service
systemctl enable aap-auto-registration.service



%end

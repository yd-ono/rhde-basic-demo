network --bootproto=dhcp --device=link --activate --onboot=on --hostname=microshift.local --noipv6
keyboard --xlayouts='us'
lang en_US.UTF-8
timezone Asia/Tokyo --isUtc
zerombr
clearpart --all --initlabel
part /boot/efi --size 200 --fstype=efi
part /boot --size 800 --asprimary --fstype=xfs
part pv.01 --grow
volgroup rhel pv.01
logvol / --fstype xfs --vgname rhel --size=20480 --name=root
reboot
text
rootpw --lock
user --groups=wheel --name=redhat --password=redhat --gecos="redhat"
services --enabled=ostree-remount
ostreesetup --nogpg --remote=edge --url=http://YOUR_OSTREE_REPO_IP:9000/ostree/repo/ --osname=rhel --ref=rhel/9/x86_64/edge

%post --log=/var/log/anaconda/post-install.log --erroronfail

echo -e 'redhat\tALL=(ALL)\tNOPASSWD: ALL' >> /etc/sudoers

mkdir -p /etc/crio
cat > /etc/crio/openshift-pull-secret << PULLSECRETEOF
<REPLACE_YOUR_PULL_SECRET>
PULLSECRETEOF
chmod 600 /etc/crio/openshift-pull-secret

cat > /etc/resolv.conf << EOF
nameserver 8.8.8.8
EOF

mkdir -p /root/.kube

# Configure the firewall (rules reload is not necessary here)
firewall-offline-cmd --zone=trusted --add-source=10.42.0.0/16
firewall-offline-cmd --zone=trusted --add-source=169.254.169.1

# Make the KUBECONFIG from MicroShift directly available for the root user
echo -e 'export KUBECONFIG=/var/lib/microshift/resources/kubeadmin/kubeconfig' >> /root/.profile

# rpm-ostree upgrade check
cat <<EOF >  /etc/rpm-ostreed.conf

[Daemon]
AutomaticUpdatePolicy=stage
EOF

systemctl restart rpm-ostreed
systemctl enable rpm-ostreed-automatic.timer --now


# create playbook for controller registration
cat > /var/tmp/aap-auto-registration.yml <<EOF
---
- name: register a edge system to ansible controller
  hosts:
    - localhost
  vars:
    ansible_connection: local
    controller_url: https://<YOUR_CONTROLLER_IP>/api/v2
    controller_inventory: Edge Systems
    provisioning_template: Provision Edge Device
  module_defaults:
    ansible.builtin.uri:
      user: "admin"
      password: "redhat"
      force_basic_auth: yes
      validate_certs: no

  tasks:
    - name: find the id of {{ controller_inventory }}
      ansible.builtin.uri:
        url: "{{ controller_url }}/inventories/?name={{ controller_inventory | regex_replace(' ', '%20') }}"
      register: controller_inventory_lookup
    - name: set inventory id fact
      ansible.builtin.set_fact:
        controller_inventory_id: "{{ controller_inventory_lookup.json.results[0].id }}"
    - name: create host in inventory {{ controller_inventory }}
      ansible.builtin.uri:
        url: "{{ controller_url }}/inventories/{{ controller_inventory_id }}/hosts/"
        method: POST
        body_format: json
        body:
          name: "edge-{{ ansible_default_ipv4.macaddress | replace(':','') }}"
          variables:
            'ansible_host: {{ ansible_default_ipv4.address }}'
      register: create_host
      changed_when:
        - create_host.status | int == 201
      failed_when:
        - create_host.status | int != 201
        - "'already exists' not in create_host.content"
    - name: find the id of {{ provisioning_template }}
      ansible.builtin.uri:
        url: "{{ controller_url }}/workflow_job_templates?name={{ provisioning_template | regex_replace(' ', '%20') }}"
      register: job_template_lookup
    - name: set the id of {{ provisioning_template }}
      ansible.builtin.set_fact:
        job_template_id: "{{ job_template_lookup.json.results[0].id }}"
    - name: trigger {{ provisioning_template }}
      ansible.builtin.uri:
        url: "{{ controller_url }}/workflow_job_templates/{{ job_template_id }}/launch/"
        method: POST
        status_code:
          - 201

EOF

# create systemd runonce file to trigger playbook
cat > /etc/systemd/system/aap-auto-registration.service <<EOF
[Unit]
Description=Ansible Automation Platform Auto-Registration
After=local-fs.target
After=network.target
ConditionPathExists=!/var/tmp/post-installed

[Service]
ExecStartPre=/usr/bin/sleep 20
ExecStart=/usr/bin/ansible-playbook /var/tmp/aap-auto-registration.yml
ExecStartPost=/usr/bin/touch /var/tmp/post-installed
User=root
RemainAfterExit=true
Type=oneshot

[Install]
WantedBy=multi-user.target
EOF

# Enable the service
systemctl enable aap-auto-registration.service


%end
